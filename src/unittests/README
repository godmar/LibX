I.	How to invoke the launcher:
	
	1. Compile utils classes
		javac org/libx/utils/*.java

	2.  Run all tests with
		./launchtest.pl --all

	3. Run single tests with
		./launchtest nameoftestsuite

	For more info and examples, see: ./launchtest.pl --help

	During each run, a results file will be generated if there are any 
	mismatches 	against reference files. A report for each individual diff will 
	be recorded in testName.diff in the directory of the .ref file. The results 
	files append a UNIX timestamp for uniqueness, in case we want to save them 
	for some reason.

II.	Reference File Checking

	The unit testing framework has the ability to perform a diff on a test's 
	output against a pre-filled reference file. The user can create a reference 
	file for a particular test as described below.

	You will see a number of folders in this directory, such as PackageVisitor,
	TextTransformer, etc. These names are derived from the names of the test 
	suites to be executed. 

	To create a reference file:

	1.	run ./launchtest.pl --ref nameoftestsuite; (or --all)
	2.	When each test is finished, the launcher will prompt to see if the 
		output was correct; if so, type "y"
	3.	A new reference file will be created; to overwrite an existing reference
		file, repeat this process

III.Directory Structure
	
	There are two primary directories that are used. The testsuites/ directory
	contains the actual .js files that are executed as test suites, and the
	reference files that have been created. The testresults/ directory contains
	the results from the last test run. testsuites/ and testresults/ have the
	same directory structure, so that the test results stay organized. 

	When invoking the launcher on a particular test suite, say, packagevisitor,
	the user can omit the testsuites/ directory. e.g.,
		./launchtest.pl packagevisitor

	This invocation will execute the .js files in testsuites/packagevisitor and
	in all subdirectories recursively.

// ---

NOTES:
	- the diff ignored differences in blank lines by default
	- each time the tests are run, the output file (testName.txt) is replaced

A good example of how to set up the reference files is available for the
atompub.js test file.

TODO:
	- wait/signal, conc.js...
	- rhinoxhr --> env
