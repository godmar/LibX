I.	Configuration
	
	1. Compile utils classes
		javac org/libx/utils/*.java

    2. Change the classpath variable in runtests.sh to the path where js.jar 
        is located (default is /usr/share/java/js.jar)

II. Invocation

    Run all tests:
        ./runtests.sh rununittests.js

    Run individual test:
        ./runtests.sh <sometest.js>

III. Notes
    
    1. An example test suite can be found in testing.js, at the bottom. Search
        for UNITTESTS.

    2. Do not add libx.testing.runAllUnitTests() at the end of your unittest
        source files; the launch script does this.
        
    3. Assertion statements are available through the testing framework, e.g:
        libx.testing.methods.ASSERT_EQUAL(a, b)

    4. Timeouts can be set for individual unit test functions:
        libx.testing.addUnitTest({
            suiteName:  "some test suite",
            funcName:   "name of function",
            timeout:    10,
            testFunction:   function () { ... }
        });
        The timeout value is measured in seconds.

    5. Setup functions can be defined. The setup function is invoked before
        each individual unit test function. The setup function can return
        a value, and this value is accessible inside the unit test function:
        libx.testing.createUnitTestSuite({
            name:   "some test suite",
            setup: function () {
                ...
                return x;
            }
        )};
        libx.testing.addUnitTest({
            suiteName:  "some test suite",
            testFunction:   function (setup) {
                // 'setup' is the value returned by the setup function
                ...
            });
        });

    6. Logging is enabled by default; each run will produce a file called 
        testlog_<timestamp>.txt. Logging can be disabled by setting the
        'logging' variable in testing.js to false.
