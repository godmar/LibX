I.	Setup
	
	Compile utils classes
    javac org/libx/utils/*.java

II. Invocation

    Run all tests:
        ./runtest.sh --all

    Run individual test:
        './runtest.sh <sometest>' will load the file 'tests/sometest.test.js'

III. Notes
    
    1. Unit Test output can be recorded by adding "-r" to the end of the
        ./runtest invocation. These outputs are stored in tests/output/

    2. Do not add 'libx.testing.runAllUnitTests()' at the end of your unittest
        source files; the launch script does this.
        
    3. Assertion statements are available through the testing framework, e.g:
        libx.testing.methods.ASSERT_EQUAL(a, b)

    4. Timeouts can be set for individual unit test functions:
        libx.testing.addUnitTest({
            suiteName:  "some test suite",
            funcName:   "name of function",
            timeout:    10,
            testFunction:   function () { ... }
        });
        The timeout value is measured in seconds.

    5. Setup functions can be defined. The setup function is invoked before
        each individual unit test function. The setup function can return
        a value, and this value is accessible inside the unit test function:
        libx.testing.createUnitTestSuite({
            name:   "some test suite",
            setup: function () {
                ...
                return x;
            }
        )};
        libx.testing.addUnitTest({
            suiteName:  "some test suite",
            testFunction:   function (setup) {
                // 'setup' is the value returned by the setup function
                ...
            });
        });

    6. Logging is enabled by default; each run will produce a file called 
        testlog_<timestamp>.txt. Logging can be disabled by setting the
        'logging' variable in testing.js to false. The files can be cleaned up
        by running './runtest.sh --clearlogs'

    7. Unit test output validation can be done using the function
        libx.testing.methods.ASSERT_OUTPUT(FILENAME). All text printed using
        the libx.testing.record(str) function during the execution of the unit test
        will be compared. 
        ***Note: make sure to add a newline at the end of each text file.

    8. Unit tests can be rigged to fail on purpose. For a particular assert
        to fail, add an extra boolean arg to your function call, e.g.
        ASSERT_OUTPUT("output.txt", true). Functions that already have inverses
        do not support this and will ignore the argument if you pass it.
        ***Note: At this time, (05/2010), this feature is tested minimally
