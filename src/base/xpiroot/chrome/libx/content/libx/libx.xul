<?xml version="1.0" ?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://browser/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://libx/skin/libx.css" type="text/css"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is LibX Firefox Extension.
   -
   - The Initial Developer of the Original Code is Annette Bailey (libx.org@gmail.com).
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer and Virginia Tech. All Rights Reserved.
   -
   - Contributor(s): Godmar Back (godmar@gmail.com)
   -
   - ***** END LICENSE BLOCK ***** -->

<!--
LibX Firefox Extension

Author: Annette Bailey <annette.bailey@gmail.com>
-->
<!DOCTYPE overlay>

<overlay id="libx-overlay" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <script type="application/x-javascript" src="chrome://global/content/utilityOverlay.js" />
    <script type="application/x-javascript" src="chrome://global/content/nsDragAndDrop.js" />
    <script type="application/x-javascript" src="chrome://global/content/nsTransferable.js" />
    <script type="application/x-javascript">
        <![CDATA[
        
        /* Inherit properties of global libx object */
        (function () {
            var gLibx = Components.classes['@libx.org/libxcomponent;1'].getService().wrappedJSObject.libx;
            libx = { };
            gLibx.core.Class.mixin(libx, gLibx, true);
        })();

        ]]>
    </script>
    <script type="application/x-javascript" src="chrome://libx/content/core/window/ff/window.js" />
    <script type="application/x-javascript" src="chrome://libx/content/core/window/ff/ui.js" />

    <script type="application/x-javascript">
    <![CDATA[
      // must postpone initialization until entire overlay is loaded into chrome
      window.addEventListener("load", function () {
        // delay LibX initialization until after all other handlers have executed
        // improves startup speed and avoids triggering bugs in Firefox proper on MacOS
        // suggested by Fritz Anderson (fritza@uchicago.edu)
        window.setTimeout(libx.ffwindow.initialize, 0); 
      }, false);
    ]]>
    </script>
    
    <script type="application/javascript">
        <![CDATA[

        // make sure libx button is visible
        var navbar = document.getElementById("nav-bar");
        var newset = navbar.currentSet + ",libx-button";
        navbar.currentSet = newset;
        navbar.setAttribute("currentset", newset);

        window.addEventListener('load', function() {
            
            var button = document.getElementById('libx-button');
            
            // use an alternative to panel for Windows due to Firefox bug #385609,
            // https://bugzilla.mozilla.org/show_bug.cgi?id=385609
            var strOS = navigator.appVersion;
            if(strOS.indexOf('Win') == -1) {
                
                var iframe = document.getElementById('libx-iframe'); 
                
                button.setAttribute('popup', 'libx-panel');
                button.addEventListener('click', function (e) {
                    if (e.button != 0)
                        return;
                    iframe.style.width = "0";
                    iframe.style.height = "0";
                    iframe.contentWindow.location = "chrome://libx/content/popup/popup.html";
                }, false);
                
                libx.events.addListener('PopupLoaded', {
                    onPopupLoaded: function() {

                        var $ = iframe.contentWindow.$;
                        $('body').css('border', '1px solid #666');
                
                        function adjustPopupPosition(e) {

                            // this timeout is required to fix a bug in linux where
                            // switching between full/simple views occasionally makes
                            // the popup shrink too small
                            setTimeout(function() {
                                var width = $('body').outerWidth();
                                var height = $('body').outerHeight();
                                iframe.style.width = width + 'px';
                                iframe.style.height = height +'px';
                            }, 0);
                        }
                    
                        $('body').bind('DOMSubtreeModified', adjustPopupPosition);
                        adjustPopupPosition();
                        
                    }
                });
                
            } else {
            
                var popupWindow = { close: libx.core.EmptyFunction };
                
                // left=-10000  creates the window off-screen to remove flickering
                // titlebar=no  creates the window with no titlebar to fix layout artifacts glitch
                button.addEventListener('click', function() {
                    popupWindow.close();
                    popupWindow = window.open("chrome://libx/content/popup/popup.xul",
                        "libx-popup",
                        "left=-10000,titlebar=no,chrome=yes,dependent=yes");
                }, false);
                
                libx.events.addListener('PopupLoaded', {
                    onPopupLoaded: function() {

                        var iframe = popupWindow.document.getElementById('iframe');
                        iframe.contentWindow.focus();
                        
                        // close popup if user clicks outside of it
                        iframe.contentWindow.addEventListener('blur', function() {
                            popupWindow.close();
                        }, false);
                    
                        // close popup if user presses Esc
                        popupWindow.addEventListener('keydown', function(e) {
                            if(e.which == 27)
                                popupWindow.close();
                        }, false);
                    
                        var $ = iframe.contentWindow.$;
                        $('body').css('border', '1px solid #666');
            
                        function adjustPopupPosition(e) {
                            var width = $('body').outerWidth();
                            var height = $('body').outerHeight();
                            iframe.style.width = width + 'px';
                            iframe.style.height = height +'px';
                            popupWindow.innerWidth = width;
                            popupWindow.innerHeight = height;
                                
                            // screenX and screenY specify the coordinates of the
                            // top left corner of the popup
                            var buttonBox = document.getElementById('libx-button').boxObject;
                            var screenX = buttonBox.screenX - popupWindow.outerWidth + buttonBox.width;
                            var screenY = buttonBox.screenY + buttonBox.height;
        
                            // readjust popup position if it goes off the screen to the left
                            if (screenX < 0)
                                screenX = 0;
                                
                            // if the popup is too long, shorten it and add scrolling
                            iframe.style.overflow = "hidden";
                            if (screenY > screen.height - popupWindow.outerHeight - 50) {
                                setTimeout(function() {
                                    height = screen.height - screenY - 50;
                                    iframe.style.height = height +'px';
                                    popupWindow.innerHeight = height;
                                    libx.log.write("adjusted height: " + height);
                                    iframe.style.overflow = "visible";
                                }, 100);
                            }
            
                            popupWindow.moveTo(screenX, screenY);
                        }
                        
                        $('body').bind('DOMSubtreeModified', function () {
                            adjustPopupPosition();
                            // sometimes doesn't work, adjust again after a delay
                            // to ensure correct positioning
                            setTimeout(function() {
                                adjustPopupPosition();
                            }, 100);
                        });
                        
                        // this timeout fixes a layout bug where the border for the change edition view
                        // is not set correctly
                        setTimeout(function() {
                            adjustPopupPosition();
                        }, 0);
                        
                    }
                });
            
            }
            
        }, false);
        ]]>
    </script>
    
	<menupopup id="contentAreaContextMenu">
		<menuseparator id="libx-context-menu-separator" />
		<!-- create a nested menu like so -->
        <menu hidden="true" class="menu-iconic" id="toolbarFieldsMenu" label="Add Selection to Search as...">
		</menu>
		<menuitem hidden="true" id="libx-endholder"/>
	</menupopup>
    
    <!-- used in all OSs except Windows -->
    <popupset>
        <panel position="after_end" id="libx-panel">
            <iframe style="overflow: hidden;" id="libx-iframe"></iframe>
        </panel>
    </popupset>

    <!-- button details -->
    <toolbarpalette id="BrowserToolbarPalette">
    <toolbarbutton id="libx-button"
      ondragenter="event.stopPropagation(); event.preventDefault();"
      ondragover="event.stopPropagation(); event.preventDefault();"
      ondrop="event.stopPropagation(); event.preventDefault(); libx.ui.magicSearch(event.dataTransfer.getData('text/plain'));"
      label="LibX"
      tooltiptext="LibX"
      image="chrome://libx/skin/libx2-16.png"
      class="toolbarbutton-1 chromeclass-toolbar-additional"
      />
  </toolbarpalette>

</overlay>

<!-- 
vim: ts=4 
-->
