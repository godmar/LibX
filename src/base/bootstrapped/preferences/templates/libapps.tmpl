{!

/*
 * Displays all loaded libapps and modules.
 */

function encode ( str ) {
    if (typeof str == 'object')
        str = libx.utils.json.stringify(str);
	return libx.utils.xml.encodeEntities ( '' + str );
}

var appProps = [ "include","exclude" ];
var modProps = [ "include","exclude", "guardedby", "regexptexttransformer", "require" ];

var idnum = 0;

/************/

var templateProcessedAQ = new libx.utils.collections.ActivityQueue();
var blocker = new libx.utils.collections.EmptyActivity();
templateProcessedAQ.scheduleLast(blocker);
aQueues.push(blocker);

registerHandlers = {
    onready: function () {
        /* move libapp information div and source div to right pane */
        $('.module-info').appendTo('#modules');

        $('.libapplink').click(function () {
            $('.module-info').hide();
            $($(this).attr('href')).show();
            
            /* prevent page from scrolling to anchor */
            return false;
        });
    }
};
templateProcessedAQ.scheduleLast(registerHandlers);
registerHandlers.markReady();

function addLibapp(libapp) {
    var newDiv = '<div class="ui-state-default ui-corner-all" style="margin-bottom: 5px;">\n'
           + '<span>\n'
           + '<div style="font-weight: bold;">' + encode(libapp.description) + '</div>\n';
    if (libapp.id != null)
        newDiv += '<div>' + libapp.id + '</div>\n';
    for (var i = 0; i < appProps.length; i++) {
        for (var j = 0; j < libapp[appProps[i]].length; j++)
            newDiv += "<p>" + appProps[i] + ":" + libapp[appProps[i]][j] + "</p>\n";
    }
    newDiv += '</span>\n'
            + '<ul style="list-style-type:none; text-decoration: underline;">\n';
            
    var addDivAct = {
        onready: function () {
            newDiv += '</ul>\n</div>\n';
            $("#libapp-info").append(newDiv);
        }
    };
    registerHandlers.scheduleBefore(addDivAct);
            
    for (var i = 0; i < libapp.entries.length; i++) {
        var entry = libapp.entries[i];
        var blocker = new libx.utils.collections.EmptyActivity();
        addDivAct.scheduleBefore(blocker);
        
        (function (blocker) {
            new libx.libapp.PackageWalker(entry.url).walk({
                onmodule: function (module) {
                    
                    newDiv += '<li style="list-style-type:none;">\n';
                    if (module != null) {
                        idnum++;
                        var linkstr = "link-" + idnum;
                        var divstr = "div-" + idnum;
                        newDiv += '<a class="libapplink" id="' + linkstr + '" href="#' + divstr + '">' + encode(module.description) + '</a>\n'
                                + '<div id="' + divstr + '" class="module-info" style="display:none;">\n'
                                + '<div class="ui-state-default ui-corner-all" style="font-weight: normal; font-size: 0.8em; color: black; padding: 5px;">\n'
                                + '<div>URL: ' + encode(entry.url) + '</div>\n';
                        for (var j = 0; j < modProps.length; j++) {
                            for (var k = 0; k < module[modProps[j]].length; k++)
                                newDiv += '<div>' + modProps[j] + ' : ' + encode(module[modProps[j]][k]) + '</div>\n';
                        }
                        newDiv += '</div>\n'
                                + '<div style="padding: 5px;" >\n'
                                + '<pre>' + encode(module.body) + '</pre>\n'
                                + '</div>\n'
                                + '</div>';
                    }
                    newDiv += '</li>\n';
                    blocker.markReady();
                }
            });
        }) (blocker);
        
    }

    /* add div once this template has been processed and placed in the DOM, and
     * when all modules for this libapp have been processed */
    addDivAct.markReady();
    
}

function processEntries(entries) {

    for (var i = 0; i < entries.length; i++) {
        
        var blocker = new libx.utils.collections.EmptyActivity();
        registerHandlers.scheduleBefore(blocker);
        
        (function (blocker) {
            new libx.libapp.PackageWalker(entries[i].url).walk({
            
                onpackage: function (pkg) {
                    processEntries(pkg.entries);
                    blocker.markReady();
                },
                onlibapp: function (libapp) {
                    addLibapp(libapp);
                    blocker.markReady();
                }
                
            });
        }) (blocker);
            
    }

}

processEntries(libx.libapp.getPackages(true).map(function (pkg) {
    return { url: pkg };
}));

!}

<div style="overflow: hidden;">
    <div id="libapp-info" style="font-size:.8em;float:left;width:400px;"></div>
    <div style="margin-left: 410px;">
        <div id="modules"></div>
    </div>
</div>

