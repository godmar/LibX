{libxtemplate}

{BeginLocale=en_US}
    {
        "package_add": { "message": "Subscribe to a package:" },
        "package_whatis": { "message" : "What is a package?"},
        "package_tooltip": { "message" : "A package is a collection of libapps and other packages.  By subscribing to a package, you will experience enhanced functionality on pages where the package's libapps are active." },
        "package_unsubscribe": { "message" : "Unsubscribe packages"},
        "package_unsubscribe_tooltip": { "message" : "You can unsubscribe only those packages, which have been added by you explicitly from above input. And packages which are subscribed by default by the edition remain intact; to deactivate them simply uncheck entire package." },
        
        "banner": {"message" : "Libapps Display Tree:"},
        "banner_msg1": {"message": "To explore packages/libapps, expand the tree"},
        "banner_msg2": {"message": "To see details click on any label"},
   
        "close": {"message": "Close"},
        "unsubscribe": {"message": "Unsubscribe Package"},
        "showPrefs": {"message": "Show Preferences"},
        "hidePrefs": {"message": "Hide Preferences"},
        "showDetails": {"message": "Show Details"},
        "hideDetails": {"message": "Hide Details"},
        "showCode": {"message": "Show Code"},
        "hideCode": {"message": "Hide Code"},
        "showParams": {"message": "Show Input Parameters"},
        "hideParams": {"message": "Hide Input Parameters"},
        
        "unknown": {"message": "unknown"},
        "Value": {"message": "Value"},
        "Parameters": {"message": "Parameters"},
        "Preferences": {"message": "Preferences"},
        
        "Package": {"message": "Package"},
        "Libapp": {"message": "Libapp"},
        "Module": {"message": "Module"},
        "include": {"message": "Include"},
        "exclude": {"message": "Exclude"},
        "guardedby": {"message": "Guarded By"},
        "regexptexttransformer": {"message": "RegEx Text Transformer"},
        "require": {"message": "Require"},
        
        "Details": {"message": "Details"},
        "Id": {"message": "Id"},
        "LastUpdatedOn": {"message": "Last Updated On"},
        "Author": {"message": "Author"},
        "Weblink": {"message": "Weblink"},
        "Email": {"message": "Email"},
        "Code": {"message": "Code"},

        "param_err_0a": {"message": "Parameter type mismatch, Module parameter type is "},
        "param_err_0b": {"message": " and Libapp argument is "},
        "param_err_1": {"message": "Parameter Value is unknown! No matching argument passed from the Libapp"},
        "param_err_2": {"message": "Argument is passed from  parent Libapp but is never declared (as parameter) in this module."}
    }
{EndLocale}

{!
/*
 * Template can be run in two modes:
 * For just displaying libapp/package/module (such as in client-side libappdisplay)
 * In a stand-alone (Cleint Side) mode: we do not display box to subscribe; do not display preferences.
 */

var entryType = { "package": "{L 'Package' L}", "libapp": "{L 'Libapp' L}", "module": "{L 'Module' L}" };
var appProps = [ "include","exclude" ];
var modProps = [ "include","exclude", "guardedby", "regexptexttransformer", "require" ];

var i18n = {
    "include": "{L 'include' L}",
    "exclude": "{L 'exclude' L}",
    "guardedby": "{L 'guardedby' L}",
    "regexptexttransformer": "{L 'regexptexttransformer' L}",
    "require": "{L 'require' L}",
    
    "close": "{L 'close' L}",
    "unsubscribe": "{L 'unsubscribe' L}",
    "showDetails": "{L 'showDetails' L}","hideDetails": "{L 'hideDetails' L}",
    "showPrefs": "{L 'showPrefs' L}", "hidePrefs": "{L 'hidePrefs' L}",
    "showCode": "{L 'showCode' L}", "hideCode": "{L 'hideCode' L}",
    "showParams": "{L 'showParams' L}", "hideParams": "{L 'hideParams' L}",

    "Details": "{L 'Details' L}",
    "Id": "{L 'Id' L}",
    "LastUpdatedOn": "{L 'LastUpdatedOn' L}",
    "Author": "{L 'Author' L}",
    "Weblink": "{L 'Weblink' L}",
    "Email": "{L 'Email' L}",
    "Code": "{L 'Code' L}",

    "unknown": "{L 'unknown' L}",
    "Value": "{L 'Value' L}",
    "Parameters": "{L 'Parameters' L}",
    "Preferences": "{L 'Preferences' L}",

    "param_err_0a": "{L 'param_err_0a' L}",
    "param_err_0b": "{L 'param_err_0b' L}",
    "param_err_1": "{L 'param_err_1' L}",
    "param_err_2": "{L 'param_err_2' L}"
   
};

/*
 * Gets a string bundle for a given entry before processing that entry.
 *
 * If an array of child entries are given, they are all also retrieved before
 * the entry is processed, and they are used as a fall-back when the entry does
 * not contain the locale property being fetched.
 *
 * This is used in the case where a module may store a preference under the 
 * currently executing libapp.  In this case, the module (not the libapp) will
 * contain the locale information for the preference.  Therefore, if processing
 * a libapp's preferences, we may only find locale properties for certain
 * preferences under the libapp's module entries.
 */
function getStringBundle(url, callback, entries) {

    var bundles = [];
    
    var bundlesQueue = new libx.utils.collections.ActivityQueue();
    
    /* fetch the string bundle for this URL */
    var blocker = {
        onready: function (bundle) {
            bundle && bundles.push(bundle);
        }
    };
    bundlesQueue.scheduleLast(blocker);
    libx.locale.getBundle({
        feed: url,
        success: function ( stringBundle ) {
            blocker.markReady(stringBundle);
        }
    });
    
    /* also fetch all string bundles for all child modules */
    if (entries) {
        for (var i = 0; i < entries.length; i++) {
            (function () {
                var blocker = {
                    onready: function (bundle) {
                        bundles.push(bundle);
                    }
                };
                bundlesQueue.scheduleLast(blocker);
                new libx.libapp.PackageWalker(entries[i].url).walk({
                    onmodule: function (module) {
                        libx.locale.getBundle({
                            feed: module.id,
                            success: function ( stringBundle ) {
                                blocker.markReady(stringBundle);
                            }
                        });
                    },
                    error: function () {
                        blocker.markReady();
                    }
                });
            }) ();
        }
    }
    
    var bundlesReady = {
        onready: function () {
            var tmplData = {
                /*
                 * This function is used in preference.tmpl to get the locale
                 * string associated with a preference. Here, we first look
                 * under this entry for the locale property.  If not found, we 
                 * search all child module bundles for the key.
                 *
                 * Note that for some property X, "[X]" is returned if X is not
                 * a valid key in the string bundle.
                 */
                getMessage: function (node) {
                    var key = node._idstr.replace("libx.prefs." + url + ".", "");
                    for (var i = 0; i < bundles.length; i++) {
                        var msg = bundles[i].getProperty(key);
                        if (msg != "[" + key + "]")
                            return msg;
                    }
                    return "[" + key + "]";
                }
            };
            callback(tmplData);
        }
    };
    bundlesQueue.scheduleLast(bundlesReady);
    bundlesReady.markReady();

}

var aQ = new libx.utils.collections.DelayedActivityQueue();
templateScope.postProcessingActions.push(aQ);
var $rightPanel = $('<div class="ui-state-default ui-corner-all right-panel">'
                  + '<div>Select an entry in the tree to set its preferences.</div>'
                  + '</div>');

var $checkTree = $('<ul id="root" class="checktree" style="float: left;">'
                 + '<li class="checktree_separator"></li>'
                 + '</ul>');

/*
* Creates a node in display tree
* @param {object} entry - Contains info describing each entry
*/
function makeNode(entry) {
    
    var $node = $('<li>\n'
                + '   <label>' + entry.title + '</label>\n'
                + '   <ul></ul>\n'
                + '</li>\n');
    $node.data("id",entry.id);
    if (entry.type != 'module') {
        var checked = libx.prefs[entry.id]._enabled._value ? 'checked="checked"' : "";
        $node.prepend('<input type="checkbox" ' + checked + ' />\n');
    }
    
    return $node;
    
}


function encode ( str ) {
   if (typeof str == 'object')
      str = libx.utils.json.stringify(str);
   return libx.utils.xml.encodeEntities ( '' + str );
}


function reloadPackages() {
    libx.libapp.reloadPackages();
    var p = process(null, "libx.prefs.libapps",data);
    $("#libapps-tmpl").replaceWith(p.html);
    p.doPostInsertionProcessing();
}

var displaymode = false;

if(self.data && self.data.libappdisplaymode)
  displaymode = true;

processCheckTree = {    
    onready: function () {

        $("#libapps-tmpl")
            .append($checkTree)
            .append($rightPanel)
            .append('<div style="clear: both"></div>')
            .children("form").submit(function () {
                var feed = $(this).children("input").val();
                if (feed && libx.libapp.addUserPackage(feed))
                    reloadPackages();
                return false;
            });
            
        $checkTree
            .find("ul:empty").remove()
            .end().find(".checktree_separator").remove()
            .end().checkTree({
                onCheck:      savePref,
                onUnCheck:    savePref,
                onHalfCheck:  savePref,
                labelAction:  "custom",
                onLabelHoverOver: function ($elem) {
                    var pos = $elem.position();
                    $rightPanel
                        .show()
                        .css("position", "absolute")
                        .css("left", pos.left+50)
                        .css("top", pos.top+30)
                        .children().hide();
                    $($elem.data("popup")).show();
                    e.stopPropagation();
                },
                onLabelHoverOut: function(e,$elem) {
                    $rightPanel.hide();
                    e.stopPropagation();
                },
                onLabelClick: function (e, $elem) {
                    $rightPanel.hide();
                    $(".info-panel").parent().find("label:first").removeClass("selected");
                    $(".info-panel").hide();
                    $elem.find("label:first").addClass("selected");
                    var $infoPanelElem = $elem.children(".info-panel");
                    if(!displaymode) {
                      $infoPanelElem
                                    .each( function () {
                                             insertPreferences($(this));
                                           }
                                         );
                    }
                    
                    if($infoPanelElem.show().hasClass("module"))
                        displayModuleParameters($infoPanelElem.parent()); 

                    e.stopPropagation();
                }
            });
        /*
         * Stand-Alone mode == displaymode, If true remove checkboxes from
         * our display tree
         */
        if(displaymode)
        {
            $checkTree.find(".checked").hide()
                                       .end()
                                       .find(".uncheckable")
                                       .removeClass("uncheckable")
                                       .addClass("bullet-point");
            $("#libapps-tmpl")
                          .addClass("ui-tabs ui-widget ui-widget-content ui-corner-all")
                          .css("background","transparent");

        }else {/*display preferences toggle option*/
           $(".toggle-info-panel-prefs").live("click", function () {
            if ($(this).text() == i18n["showPrefs"]) {
                $(this).text(i18n["hidePrefs"]);
                $(this).parent().siblings(".info-panel-prefs").show();
            }else if ($(this).text() == i18n["hidePrefs"]) {
                $(this).text(i18n["showPrefs"]);
                $(this).parent().siblings(".info-panel-prefs").hide();
            }
            return false;
           } );
        }
        
        /* BRN: this gets rebound at each template reload */
        /*$(document).click(function (e) {
            if (!$(e.target).parents().andSelf().filter(".info-panel").length)
                $(".info-panel").hide();
        });*/

        /* Show|Hide logic for info panel of each node in tree */
        $(".toggle-info-panel-details").live("click", function () {
            if ($(this).text() == i18n["showDetails"]) {
                $(this).text(i18n["hideDetails"]);
                $(this).parent().siblings(".info-panel-details").show();
            }else if ($(this).text() == i18n["hideDetails"]) {
                $(this).text(i18n["showDetails"]);
                $(this).parent().siblings(".info-panel-details").hide();
            }
            return false;
        } );

          $(".toggle-info-panel-codebody").live("click", function () {
            if ($(this).text() == i18n["showCode"]) {
                $(this).text(i18n["hideCode"]);
                $(this).parent().siblings(".info-panel-codebody").show();
            }else if($(this).text() == i18n["hideCode"]) {
                $(this).text(i18n["showCode"]);
                $(this).parent().siblings(".info-panel-codebody").hide();
            }
            return false;
          } );
         
         $(".toggle-info-panel-args").live("click", function () {
             toggleInfoPanelArgs($(this));
             return false;
         } );

         $(".close-info-panel").live("click", function () {
             $(this).parent().parent().hide();
             return false;
         } );
        $rightPanel.hide();
    }
};
aQ.scheduleLast(processCheckTree);
processCheckTree.markReady();

function toggleInfoPanelArgs($argsLink)
{   
    if($argsLink.text() == i18n["showParams"]) {         
         $argsLink.text(i18n["hideParams"]);
         displayModuleParameters($argsLink.parent().parent().parent());
    }else if($argsLink.text() == i18n["hideParams"]) {
         $argsLink.text(i18n["showParams"]);
         $argsLink.parent().siblings(".info-panel-params").hide();
    } 
}

function savePref($li) {
    
    var enabled = $li.children(".checkbox").hasClass("checked");
    var pref = libx.prefs[$li.data("id")]._enabled;
    if (pref._value != enabled) {
        pref._setValue(enabled);
        libx.preferences.save();
        
        /* if this entry is a root package, reloadPackages() will reset the package schedulers */
        if ($.inArray($li.data('id'), libx.libapp.getPackages()) >= 0)
            libx.libapp.reloadPackages();
        else
            libx.libapp.clearOverridden();
    }
}

function ObjectSize (obj)
{
  if ( typeof obj == 'undefined') return -1;
  else if ( obj == null ) return -2;
  else{
    var s=0;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) ++s;
    }
    return s;
  }
}

function insertLinks(text) {
    var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
    return text.replace(exp,"<a href='$1' target='_blank'>$1</a>"); 
}

function insertArgToggleLink($Info_Panel)
{
    $Info_Panel
              .children(".toggle-info-panel")
              .find('.toggle-info-panel-details')
              .after(' | <a class="toggle-info-panel-link toggle-info-panel-args" href="#">'
                                + i18n["hideParams"]
                                + '</a>');
}

function displayModuleParameters($li_module)
{
  var $_infoPanel = $li_module.children(".info-panel:first");
  var $_infoPanelParams = $_infoPanel.find(".info-panel-params:first");
  /*if arg panel for this module already exists..simply unhide it ..and return*/
  if($_infoPanelParams.length > 0)
  {
     $_infoPanelParams.show();
     return;
  }
  
  var params = $li_module.data("params");
  var m_id = $li_module.data("id");
  /*Parent Libapp stores all arguments for each module, identified by "_[moduleId]" */
  var libapp_m_args = $li_module.parent().parent().data("_"+m_id);
  /*Ideal Scenario: #params declared in module should be equal 
   * to number of corresponding arguments in libapps
   * But incases where user has ill-defined xml, we handle those cases
   * and report back those errors to users
   */
  var paramLen = ObjectSize(params);
  var argLen = ObjectSize(libapp_m_args);
  /* If both #params & #args are zero. Its understood no input 
   * arguments exist in this case. Simply return !*/
  if(paramLen <= 0 && argLen <= 0)
  {
    return;
  }
  /*Show Hide/Unhide Input Parameters toggle linkbutton */
  insertArgToggleLink($_infoPanel);
  var infoPanelParams = '';
  var count = 0;
  var pDesc,pType,pVal,_pType,_name;
  if(paramLen > 0)
  {
    for( param in params)
    {
      pDesc = params[param].desc;
      pType = params[param].type;
      ++count;
      
      if( (argLen > 0) && libapp_m_args[param] != undefined ) {
        _pType = libapp_m_args[param].type;
        pVal = libapp_m_args[param].value;
      }else/*set appropriate error states*/
      {
        _pType = i18n["unknown"];
        pVal = i18n["unknown"];
      }
        
      infoPanelParams += '<li class="info-panel-params-list-item bottom-border">'
                      +    '<span class="entry-label-name">'+count+'. </span>'
                      +    '<span class="param-name">'+param+'</span>'
                      +    '<span class="entry-label-name"> ('
                      +       '<span class="param-type">'+pType+'</span>) : '
                      +    '</span>'
                      +    '<span class="param-desc">'+insertLinks(pDesc)+'</span><br />'
                      +    '<span class="param-value">'
                      +       '<span class="entry-label-name">'+ i18n["Value"] +': </span>'
                      +       '<span class="entry-text">'+insertLinks(pVal)+'</span>'
                      +    '</span>';
      /*Check for error states*/
      if(pVal ==  i18n["unknown"]){
         infoPanelParams +=  '<br/><span class="err"></span>'
                         +    '<span class="err-text">'
                         +      i18n["param_err_1"] 
                         +    '</span>';
      }
      else if(_pType != pType){
         infoPanelParams += '</br><span class="err"></span>'
                         +     '<span class="err-text">'
                         +        i18n["param_err_0a"] 
                         +        '<span class="param-type">'+pType+'</span>'
                         +        i18n["param_err_0b"]
                         +        '<span class="param-type">'+_pType+'</span>'
                         +     '</span>';
      }
     infoPanelParams += '</li>';
    }
  }

  if(argLen > 0)
  {
     for(arg in libapp_m_args)
     {
        /*Check for cases where an argument passed from libapp
          was not declared for in the module*/
        if( (paramLen > 0) && params[arg] != undefined)
        {
           continue;
        }else {
           pDesc = i18n["unknown"];
           _pType = libapp_m_args[arg].type;
           pVal = libapp_m_args[arg].value;
           ++count;
           infoPanelParams += '<li class="info-panel-params-list-item bottom-border">'
                           +     '<span class="entry-label-name">'+count+'. </span>'
                           +     '<span class="param-name">'+arg+'</span>'
                           +     '<span class="entry-label-name"> ('
                           +       '<span class="param-type">'+_pType+'</span>) : '
                           +     '</span>'
                           +    '<span class="param-desc">'+pDesc+'</span><br />'
                           +    '<span class="param-value">'
                           +       '<span class="entry-label-name">'+ i18n["Value"] +':  </span>'
                           +       '<span class="entry-text">'+insertLinks(pVal)+'</span>'                            
                           +    '</span>'
                           +    '<br/><span class="err"></span>'
                           +    '<span class="err-text">'
                           +      i18n["param_err_2"]
                           +    '</span>'
                           +  '</li>';
        }
     }
  }
  
  var pDiv = $('<div class="info-panel-params">'
           +   '<div>'
           +     '<fieldset class="ui-corner-all info-panel-sub-section-fieldset">'
           +     '<legend class="info-panel-sub-section-legend">' + i18n["Parameters"] + '</legend>'
           +       '<ul class="info-panel-params-list">'
           +          infoPanelParams
           +       '</ul>'
           +     '</fieldset>'
           +   '</div>'
           + '</div>');
  pDiv.find(".info-panel-params-list li:last-child").removeClass("bottom-border");   
  $_infoPanel.children(".info-panel-details:first").after(pDiv);
}

function formatDate(dtStr)
{
  dtStr = new Date(dtStr);
  var dt = dtStr.toDateString().split(" ");
  dt = dt[0]+", "+dt[2]+" "+dt[1]+" "+dt[3];
  dtStr = dtStr.toTimeString().split(" ");
  dtStr = dt+" "+dtStr[0]+" EST";
   
  return dtStr;
}

/*
 * This builds the main info panel which shows up
   on-clock of any label of the node in out display
   tree
   It has following toogle-linkbuttons:
   - Details
   - Input Parameters (Only if module)
   - Preferences( not in stand-alone mode)
   - JS Code Body (Only if module)
 */
function makeInfoPanel(entry,$node,tmplData){
    var props = '';
    var isModule = false;
    var nodeType = entry.type;
    var p;/*holds property val for libapp/module*/
    if(nodeType == "libapp")
    {
      /*fetch all special properties of libapp*/
      for(var i = 0; i < appProps.length; ++i){
         for(var j =0; j < entry[appProps[i]].length; ++j)
         {
           if( j == 0 ){
             props +=  '<li>'
                             +    '<span class="entry-label-name">'
                             +       i18n[appProps[i]] + ': </span>';
           }
           
           p = entry[appProps[i]][j];
           p = new RegExp(p.regex,p.flag);
           p = p.toString();
           
           props +=             '<span class="entry-text">' + encode(p) + '</span>';
           if( j == entry[appProps[i]].length - 1){
             props +=  '</li>';
           }else{
             props +=  '<br/>';
           }
         }
      }
      var nodeEntries = entry.entries; var nodeEntry;
      /*fetch arguments map for each module inside the libapp*/
      for(var i = 0; i < nodeEntries.length; ++i)
      {
         nodeEntry = nodeEntries[i];
         if(typeof nodeEntry.args == 'undefined') 
         { 
            continue;
         }
         $node.data("_" + nodeEntry.url, nodeEntry.args);
      }

    }else if(nodeType == "module")
    {
       isModule = true;
       /*fetch all special properties of module*/
       for(var i = 0; i < modProps.length; ++i){
         for(var j =0; j < entry[modProps[i]].length; ++j)
         {
           if( j == 0 ){
             props +=  '<li>'
                   +      '<span class="entry-label-name">'
                   +        i18n[modProps[i]] + ':'
                   +      '</span>';
           }
           p = entry[modProps[i]][j];
           if(i != 2 && i !=4){
             p = new RegExp(p.regex,p.flag);
             p = p.toString();
           }
           props +=     '<span class="entry-text">' + encode(p) + '</span>';
           if( j == entry[modProps[i]].length - 1){
             props += '</li>';
           }else{
             props += '<br/>';
           }
         }
       }
       /*fetch its parameters to display*/
       if(ObjectSize(entry.params) > 0)
       {         
          $node.data("params", entry.params); 
       }
    }

    var $infoPanel = "";
    if( nodeType != "error" )
    {
        /*main html construct for each info panel*/
        $infoPanel = $(  '<div class="ui-state-default ui-corner-all info-panel ' + nodeType + '">'
                       +     '<div class="info-panel-heading">' 
                       +          '<span class="entry-label-name">' + entryType[nodeType] + ': </span>'
                       +          '<span>' +  encode(entry.description) + '</span>'
                       +          '<span class="close-info-panel"><a href="#">' + i18n['close'] + '</a></span><br/>'
                       +     '</div>'
                       +     '<div class="toggle-info-panel">'
                       +          '<a class="toggle-info-panel-link toggle-info-panel-details" href="#">'+ i18n["showDetails"] +'</a>'
                       +     '</div>'
                       +     '<div class="info-panel-details">'
                       +        '<fieldset class="ui-corner-all info-panel-sub-section-fieldset">'
                       +          '<legend class="info-panel-sub-section-legend">'+ i18n["Details"] +'</legend>'
                       +          '<div>'
                       +            '<ul>'
                       +              '<li>'
                       +                 '<span class="entry-label-name">'+ i18n["Id"] +': </span>'
                       +                  '<span class="entry-text">' + entry.id + '</span>'
                       +              '</li>'
                       +              '<li>'
                       +                 '<span class="entry-label-name">'+ i18n["LastUpdatedOn"] +': </span>'
                       +                 '<span class="entry-text">' + formatDate(encode(entry.updated)) + '</span>'
                       +              '</li>'
                       +              '<li>'
                       +                 '<span class="entry-label-name">'+ i18n["Author"] +': </span>'
                       +                 '<span class="entry-text">' + encode(entry.author.name) + '</span>'
                       +              '</li>'
                       +              '<li>'
                       +                 '<span class="entry-label-name">'+ i18n["Weblink"] +': </span>'
                       +                 '<span class="entry-text">'
                       +                    '<a href="' +encode(entry.author.uri)+ '" target="_blank">'
                       +                         encode(entry.author.uri)
                       +                     '</a>'
                       +                 '</span>'
                       +               '</li>'
                       +               '<li>'
                       +                  '<span class="entry-label-name">'+ i18n["Email"] +': </span>'
                       +                  '<span class="entry-text">' + encode(entry.author.email) + '</span>'
                       +               '</li>'
                       +                props
                       +           '</ul>'
                       +         '</div>'
                       +       '</fieldset>'
                       +     '</div>'
                       + '</div>');

        if( isModule )
	{
	   $infoPanel
                .addClass("marginLeft40")
		        .append('<div class="info-panel-codebody">'
                      +    '<fieldset class="ui-corner-all info-panel-sub-section-fieldset">'
                      +      '<legend class="info-panel-sub-section-legend">' + i18n["Code"] + '</legend>'
                      +      '<div class="info-panel-codebody-sub-div">'
                      +        '<pre>' + encode(entry.body) + '</pre>\n'
                      +      '</div>'
                      +    '</fieldset>'
                      + '</div>')
		        .children('.toggle-info-panel')
				.append(' | <a class="toggle-info-panel-link toggle-info-panel-codebody" href="#">'
						    + i18n["showCode"]
						+ '</a>');

	}
    }

    var $popup = $("<div>\n" + entry.description + "</div>\n");
    $node.data("popup", $popup);
    $node.data("tmplData",tmplData);
    var addToPanel = {
	onready: function () {
	   $popup.hide().appendTo($rightPanel);
	   $node.children("label:first").after($infoPanel); 
	   /*If not in display ,mode and node contains prefs: Show link button*/
           if ( (nodeType != "error") && !(displaymode) && (libx.prefs[entry.id] && libx.prefs[entry.id]._children.length > 1))
           {
		$infoPanel
	        .children(".toggle-info-panel")
		.find('.toggle-info-panel-details')
		.after(' | <a class="toggle-info-panel-link toggle-info-panel-prefs" href="#">'
		        + i18n["showPrefs"]
			+ '</a>');		    
           }
	}
    };
    aQ.scheduleLast(addToPanel);
    addToPanel.markReady();
	
    return $infoPanel;
}

function insertPreferences ($infoPanel)
{
	if (libx.prefs[$infoPanel.parent().data("id")] && libx.prefs[$infoPanel.parent().data("id")]._children.length > 1) {
		$infoPanel.children(".info-panel-prefs").remove();
		var $toggle_Prefs = $infoPanel.children("div.toggle-info-panel").children("a.toggle-info-panel-prefs:first");
		if($toggle_Prefs.text() == i18n["hidePrefs"])
			$toggle_Prefs.text(i18n["showPrefs"]);
			
		var r = process(libx.prefs[$infoPanel.parent().data("id")], null, $infoPanel.parent().data("tmplData"));
		$infoPanel.append(  '<div class="info-panel-prefs">'
                          +    '<fieldset class="ui-corner-all info-panel-sub-section-fieldset">'
                          +       '<legend class="info-panel-sub-section-legend">' + i18n["Preferences"] + '</legend>'
                          +       '<div class="info-panel-prefs-sub-div">'
                          +          r.html
                          +       '</div>'
                          +    '</fieldset>'
                          + '</div>');
		r.doPostInsertionProcessing();
	}
}

function addRemoveLink($node, id, isRoot) {
   /* only show remove link for top level, user-added feeds */
   if(!isRoot || displaymode)
     return;

   for (var i = 0; i < libx.edition.localizationfeeds.package.length; i++) {
       var editionPkg = libx.edition.localizationfeeds.package[i];
       if (editionPkg.url == id)
            return;
   }

   $node.children(".toggle-info-panel")
        .append(" | ");

   $node.children(".toggle-info-panel")
        .append(
           $('<a class="toggle-info-panel-link toggle-info-panel-unsubscribe" href="#">' + i18n["unsubscribe"] +'</a>')
           .click(function () {
                   if (libx.libapp.removeUserPackage(id))
                       reloadPackages();
           })
        );
   


}

/*
 * @class RenderEntriesWalker -  Derives from PackageVisitor
   @param {boolean} isRoot - If starting walk from root node of feed

   This build our display tree, by walking through xml feed.
   Calls appropriate functions when processing package/libapp/module
   
   Special Implementation node: 
      - on* event of each entry type, a unique '_id' val is generated based
        on url id of entry. Its used as an id attribute of each node sub-list
      - Contains beforeentry event: that is called before any entry is walked,
        for any prep-processing in preparation of walk begin on each entry
 */
var RenderEntriesWalker = libx.core.Class.create(libx.libapp.PackageVisitor, {
    onpackage: function(pkg,prep,$parentElem) {
        var $parent = $parentElem || $checkTree;
        libx.prefs.getCategoryForUrl(pkg.id,
                        [{ name: "_enabled", type: "boolean", value: "true" }]);
        var $node = makeNode(pkg);
        $node
             .children("ul")
             .append('<li class="checktree_separator"></li>')
             .end()
             .insertBefore($parent.children(".checktree_separator"));
        /*parent onpackage call in atomparser.js*/
        this.parent(pkg,$node.children("ul"));
              
        prep.blocker.markReady();
        var $prefs = makeInfoPanel(pkg, $node);
        addRemoveLink($prefs, pkg.id,($parentElem ? false : true));
       
    },
    onlibapp: function(libapp,prep,$parentElem) {
        libx.prefs.getCategoryForUrl(libapp.id,
                        [{ name: "_enabled", type: "boolean", value: "true" }]);
        var $node = makeNode(libapp);
        var $parent = $parentElem || $checkTree;
        $parent.children(".checktree_separator").after($node);
     
        this.parent(libapp,$node.children("ul"));
       
        prep.blocker.markReady();                    
       
        getStringBundle(libapp.id, 
                       function (tmplData) {
                          makeInfoPanel(libapp, $node, tmplData);
                       },
                       libapp.entries);
    },
    onmodule: function(module,prep,$parentElem) {
        libx.prefs.getCategoryForUrl(module.id,
           [{ name: "_enabled", type: "boolean", value: "true" }]);
        if (!libx.prefs[module.id]) {
            prep.blocker.markReady();
            return;
        }
                   
        var $node = makeNode(module);
        var $parent = $parentElem || $checkTree;
        $parent.append($node);
        prep.blocker.markReady();
                    
        getStringBundle(module.id, function (tmplData) {
                                     makeInfoPanel(module, $node, tmplData);
                                  });
   },
   beforeentry: function(entryUrl) {
       var prep = {            
           blocker: new libx.utils.collections.EmptyActivity(),
           packageUrl: entryUrl
       }; 
       processCheckTree.scheduleBefore(prep.blocker);
       return prep;
   },
   error: function(err,prep,$parentElem) {
       var entry = { id: prep.packageUrl, description: err, type: "error" };
       /*makeNode(entry);*/
       var $node = $('<li>'
                +     '<span class="err"></span>'
                +     '<label>Unable to fetch feed at url: ' + prep.packageUrl + '</label>'
                +     '<ul></ul>'
                +    '</li>');
       var $parent = $parentElem || $checkTree;
       $parent.children(".checktree_separator").before($node);
       var $prefs = makeInfoPanel(entry, $node);
       addRemoveLink($prefs, prep.packageUrl,($parentElem ? false : true ));
       prep.blocker.markReady();
   }
});
    
var rootPackages = libx.libapp.getPackages().map(function (pkg) {
    return { url: pkg };
});
var renderEntriesWalker = new RenderEntriesWalker();
for (var i = 0; i < rootPackages.length; i++) {
    new libx.libapp.PackageWalker(rootPackages[i].url).walk(renderEntriesWalker);
}

templateScope.queueFunction(function () {
    $("#libapps-tmpl").find(".tooltip").tooltip({
        delay: 0,
        icon: true
    });
    
    if (displaymode) {
        $("#libapps-subscribe-form").hide();                      
    }else {
       $("#libapps-banner").hide();
    }
});

!}

<!-- libx.prefs.libapps.tmpl -->
<div id="libapps-tmpl">
    <form id="libapps-subscribe-form" style="margin-bottom: 20px;">
        {L "package_add" L}
        <input style="width: 500px;"></input><br/>
        <div class="tooltip" title="{L 'package_tooltip' L}">{L "package_whatis" L}</div><br/>
        <div class="tooltip" title="{L 'package_unsubscribe_tooltip' L}">{L "package_unsubscribe" L}</div>
    </form>
    <div id="libapps-banner" class="libapps-banner">
      <p><span class="libapps-banner-header">{L "banner" L}</span></p>
      <ul>
      <li>- <span class="libapps-banner-sub-header">{L "banner_msg1" L}</span></li>
      <li>- <span class="libapps-banner-sub-header">{L "banner_msg2" L}</span></li>
      </ul>
    </div>
</div>
