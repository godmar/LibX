{libxtemplate}

{BeginLocale=en_US}
    {
        "package_add": { "message": "Subscribe to a package:" },
        "package_whatis": { "message" : "What is a package?"},
        "package_tooltip": { "message" : "A package is a collection of libapps and other packages.  By subscribing to a package, you will experience enhanced functionality on pages where the package's libapps are active." }
    }
{EndLocale}

{!
/*
 * Template can be run in two modes:
 * For just displaying libapp/package/module (such as in client-side libappdisplay)
 * do not display box to subscribe; do not display preferences.
 */

var entryType = { "package": "Package", "libapp": "Libapp", "module": "Module" };
var appProps = [ "include","exclude" ];
var modProps = [ "include","exclude", "guardedby", "regexptexttransformer", "require" ];

/*
 * Gets a string bundle for a given entry before processing that entry.
 *
 * If an array of child entries are given, they are all also retrieved before
 * the entry is processed, and they are used as a fall-back when the entry does
 * not contain the locale property being fetched.
 *
 * This is used in the case where a module may store a preference under the 
 * currently executing libapp.  In this case, the module (not the libapp) will
 * contain the locale information for the preference.  Therefore, if processing
 * a libapp's preferences, we may only find locale properties for certain
 * preferences under the libapp's module entries.
 */
function getStringBundle(url, callback, entries) {

    var bundles = [];
    
    var bundlesQueue = new libx.utils.collections.ActivityQueue();
    
    /* fetch the string bundle for this URL */
    var blocker = {
        onready: function (bundle) {
            bundle && bundles.push(bundle);
        }
    };
    bundlesQueue.scheduleLast(blocker);
    libx.locale.getBundle({
        feed: url,
        success: function ( stringBundle ) {
            blocker.markReady(stringBundle);
        }
    });
    
    /* also fetch all string bundles for all child modules */
    if (entries) {
        for (var i = 0; i < entries.length; i++) {
            (function () {
                var blocker = {
                    onready: function (bundle) {
                        bundles.push(bundle);
                    }
                };
                bundlesQueue.scheduleLast(blocker);
                new libx.libapp.PackageWalker(entries[i].url).walk({
                    onmodule: function (module) {
                        libx.locale.getBundle({
                            feed: module.id,
                            success: function ( stringBundle ) {
                                blocker.markReady(stringBundle);
                            }
                        });
                    },
                    error: function () {
                        blocker.markReady();
                    }
                });
            }) ();
        }
    }
    
    var bundlesReady = {
        onready: function () {
            var tmplData = {
                /*
                 * This function is used in preference.tmpl to get the locale
                 * string associated with a preference. Here, we first look
                 * under this entry for the locale property.  If not found, we 
                 * search all child module bundles for the key.
                 *
                 * Note that for some property X, "[X]" is returned if X is not
                 * a valid key in the string bundle.
                 */
                getMessage: function (node) {
                    var key = node._idstr.replace("libx.prefs." + url + ".", "");
                    for (var i = 0; i < bundles.length; i++) {
                        var msg = bundles[i].getProperty(key);
                        if (msg != "[" + key + "]")
                            return msg;
                    }
                    return "[" + key + "]";
                }
            };
            callback(tmplData);
        }
    };
    bundlesQueue.scheduleLast(bundlesReady);
    bundlesReady.markReady();

}

var aQ = new libx.utils.collections.DelayedActivityQueue();
templateScope.postProcessingActions.push(aQ);
var $rightPanel = $('<div style="margin-left: 25px; padding: 10px;" class="ui-state-default ui-corner-all">'
                  + '<div>Select an entry in the tree to set its preferences.</div>'
                  + '</div>');

var $checkTree = $('<ul class="checktree" style="float: left;">'
                 + '<li class="checktree_separator"></li>'
                 + '</ul>');

function makeNode(entry) {
    
    var $node = $('<li>\n'
                + '   <label>' + entry.title + '</label>\n'
                + '   <ul></ul>\n'
                + '</li>\n');
    $node.data("id",entry.id);
    if (entry.type != 'module') {
        var checked = libx.prefs[entry.id]._enabled._value ? 'checked="checked"' : "";
        $node.prepend('<input type="checkbox" ' + checked + ' />\n');
    }
    
    return $node;
    
}

function encode ( str ) {
   if (typeof str == 'object')
      str = libx.utils.json.stringify(str);
   return libx.utils.xml.encodeEntities ( '' + str );
}


function reloadPackages() {
    libx.libapp.reloadPackages();
    var p = process(null, "libx.prefs.libapps",data);
    $("#libapps-tmpl").replaceWith(p.html);
    p.doPostInsertionProcessing();
}

var displaymode = false;

if(self.data && self.data.libappdisplaymode)
  displaymode = true;

processCheckTree = {    
    onready: function () {

        $("#libapps-tmpl")
            .append($checkTree)
            .append($rightPanel)
            .append('<div style="clear: both"></div>')
            .children("form").submit(function () {
                var feed = $(this).children("input").val();
                if (feed && libx.libapp.addUserPackage(feed))
                    reloadPackages();
                return false;
            });
            
        $checkTree
            .find("ul:empty").remove()
            .end().find(".checktree_separator").remove()
            .end().checkTree({
                onCheck:      savePref,
                onUnCheck:    savePref,
                onHalfCheck:  savePref,
                labelAction:  "custom",
                onLabelHoverOver: function ($elem) {
                    var pos = $elem.position();
                    $rightPanel
                        .show()
                        .css("position", "absolute")
                        .css("left", pos.left+50)
                        .css("top", pos.top+30)
                        .children().hide();
                    $($elem.data("popup")).show();
                    e.stopPropagation();
                },
                onLabelHoverOut: function(e,$elem) {
                    $rightPanel.hide();
                    e.stopPropagation();
                },
                onLabelClick: function (e, $elem) {
                    $rightPanel.hide();
                    $(".info-panel").parent().find("label:first").removeClass("selected");
                    $(".info-panel").hide();
                    $elem.find("label:first").addClass("selected");
                    var $infoPanelElem = $elem.children(".info-panel");
                    if(!displaymode) {
                      $infoPanelElem
                                    .each( function () {
                                             insertPreferences($(this));
                                           }
                                         );
                    }
                    
                    if($infoPanelElem.show().hasClass("module"))
                    {
                       /*var $toggleArgLink = $infoPanelElem.find("div.toggle-info-panel-links a.toggle-info-panel-args");
                      
                       if($toggleArgLink.length > 0){
                         toggleInfoPanelArgs($toggleArgLink,true);
                       }*/
                      displayModuleArguments($infoPanelElem.parent()); 
                    }
                    e.stopPropagation();
                }
            });
         
        if(displaymode)
        {
            $checkTree.find(".checked").hide()
                                       .end()
                                       .find(".uncheckable")
                                       .removeClass("uncheckable")
                                       .addClass("bullet-point");
            $("#libapps-tmpl")
                          .addClass("ui-tabs ui-widget ui-widget-content ui-corner-all")
                          .css("background","transparent");

        }else {
           $(".toggle-info-panel-prefs").live("click", function () {
            if ($(this).text() == 'Show Preferences') {
                $(this).text("Hide Preferences");
                $(this).parent().siblings(".info-panel-prefs").show();
            }else if ($(this).text() == 'Hide Preferences') {
                $(this).text("Show Preferences");
                $(this).parent().siblings(".info-panel-prefs").hide();
            }
            return false;
           } );
        }
        
        /* BRN: this gets rebound at each template reload */
        /*$(document).click(function (e) {
            if (!$(e.target).parents().andSelf().filter(".info-panel").length)
                $(".info-panel").hide();
        });*/

        /* Show|Hide logic for info panel of each node in tree */
        $(".toggle-info-panel-details").live("click", function () {
            if ($(this).text() == 'Show Details') {
                $(this).text("Hide Details");
                $(this).parent().siblings(".info-panel-details").show();
            }else if ($(this).text() == 'Hide Details') {
                $(this).text("Show Details");
                $(this).parent().siblings(".info-panel-details").hide();
            }
            return false;
        } );

          $(".toggle-info-panel-codebody").live("click", function () {
            if ($(this).text() == 'Show Code') {
                $(this).text("Hide Code");
                $(this).parent().siblings(".info-panel-codebody").show();
            }else if($(this).text() == 'Hide Code') {
                $(this).text("Show Code");
                $(this).parent().siblings(".info-panel-codebody").hide();
            }
            return false;
          } );
         
         $(".toggle-info-panel-args").live("click", function () {
             toggleInfoPanelArgs($(this));
             return false;
         } );

        $rightPanel.hide();
    }
};
aQ.scheduleLast(processCheckTree);
processCheckTree.markReady();

function toggleInfoPanelArgs($argsLink)
{   
    if($argsLink.text() == 'Show Input Arguments') {         
         $argsLink.text("Hide Input Arguments");
         displayModuleArguments($argsLink.parent().parent().parent());
    }else if($argsLink.text() == 'Hide Input Arguments') {
         $argsLink.text("Show Input Arguments");
         $argsLink.parent().siblings(".info-panel-params").hide();
    } 
}

function savePref($li) {
    
    var enabled = $li.children(".checkbox").hasClass("checked");
    var pref = libx.prefs[$li.data("id")]._enabled;
    if (pref._value != enabled) {
        pref._setValue(enabled);
        libx.preferences.save();
        
        /* if this entry is a root package, reloadPackages() will reset the package schedulers */
        if ($.inArray($li.data('id'), libx.libapp.getPackages()) >= 0)
            libx.libapp.reloadPackages();
        else
            libx.libapp.clearOverridden();
    }
}

function ObjectSize (obj)
{
  if ( typeof obj == 'undefined') return -1;
  else if ( obj == null ) return -2;
  else{
    var s=0;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) ++s;
    }
    return s;
  }
}

function insertLinks(text) {
    var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
    return text.replace(exp,"<a href='$1' target='_blank'>$1</a>"); 
}

function insertArgToggleLink($Info_Panel)
{
    $Info_Panel
              .children(".toggle-info-panel-links")
              .find('.toggle-info-panel-details')
              .after(' | <a class="toggle-info-panel-args" style="color:#0B559B;margin:0 0.4em;cursor:pointer;" href="#">'
                                + 'Hide Input Arguments'
                                + '</a>');
}

function displayModuleArguments($li_module)
{
  var $_infoPanel = $li_module.children(".info-panel:first");
  var $_infoPanelParams = $_infoPanel.find(".info-panel-params:first");
  if($_infoPanelParams.length > 0)
  {
     $_infoPanelParams.show();
     return;
  }
  
  var params = $li_module.data("params");
  var m_id = $li_module.data("id");
  var libapp_m_args = $li_module.parent().parent().data("_"+m_id);
  
  var paramLen = ObjectSize(params);
  var argLen = ObjectSize(libapp_m_args);

  if(paramLen <= 0 && argLen <= 0)
  {
    return;
  }
  insertArgToggleLink($_infoPanel);
  var infoPanelParams = '';
  var count = 0;
  var pDesc,pType,pVal,_pType,_name;
  if(paramLen > 0)
  {
    for( param in params)
    {
      pDesc = params[param].desc;
      pType = params[param].type;
      ++count;
      pVal = 'unknown';
      if( (argLen > 0) && libapp_m_args[param] != null && libapp_m_args[param] != "undefined" ) {
        _pType = libapp_m_args[param].type;
        pVal = libapp_m_args[param].value;
      }else
      {
        _pType = "unknown";
        pVal = "unknown";
      }
        
      infoPanelParams += '<li>'
                      +    '<span class="entry-label-name">'+count+'. </span>'
                      +    '<span class="arg-name">'+param+'</span>'
                      +    '<span class="entry-label-name"> ('
                      +       '<span class="arg-type">'+pType+'</span>) : '
                      +    '</span>'
                      +    '<span class="arg-desc">'+insertLinks(pDesc)+'</span><br />  '
                      +    '<span class="entry-label-name">Value: </span>'
                      +    '<span class="entry-text arg-value">'+insertLinks(pVal)+'</span>'                            
                      + '</li>';
        
      if(pVal ==  "unknown"){
         infoPanelParams += '<li>'
                         +    '<span class="err"></span>'
                         +    '<span class="err-text">'
                         +       'No matching argument was found in Libapp'
                         +    '</span>'
                         +  '</li>';
      }
      else if(_pType != pType){
         infoPanelParams += '<li>'
                         +     '<span class="err"></span>'
                         +     '<span class="err-text">'
                         +        'Parameter type mismatch: Module parameter type is '
                         +        '<span class="arg-type">'+pType+'</span>'
                         +        ' and Libapp argument type is '
                         +        '<span class="arg-type">'+_pType+'</span>'
                         +     '</span>'
                         +  '</li>';
      }
    }
  }

  if(argLen > 0)
  {
     for(arg in libapp_m_args)
     {
        if( (paramLen > 0) && params[arg] != null && params[arg] != "undefined")
        {
           continue;
        }else {
           pDesc = "unknown";
           _pType = libapp_m_args[arg].type;
           pVal = libapp_m_args[arg].value;
           ++count;
           infoPanelParams += '<li>'
                           +     '<span class="entry-label-name">'+count+'. </span>'
                           +     '<span class="arg-name">'+arg+'</span>'
                           +     '<span class="entry-label-name"> ('
                           +       '<span class="arg-type">'+_pType+'</span>) : '
                           +     '</span>'
                           +    '<span class="arg-desc">'+pDesc+'</span><br />  '
                           +    '<span class="entry-label-name">Value: </span>'
                           +    '<span class="entry-text arg-value">'+insertLinks(pVal)+'</span>'                            
                           +  ' </li>'
                           +  '<li>'
                           +    '<span class="err"></span>'
                           +    '<span class="err-text"> No matching parameter was found in module.</span>'
                           +  '</li>';
        }
     }
  }
  
  var pDiv = '<div class="info-panel-params"  style="padding:12px 12px 12px 12px;" >'
           +    '<ul>'
           +       infoPanelParams
           +    '</ul>'
           + '</div>';
     
  $_infoPanel.children(".info-panel-details:first").after(pDiv);
}

function formatDate(dtStr)
{
  dtStr = new Date(dtStr);
  var dt = dtStr.toDateString().split(" ");
  dt = dt[0]+", "+dt[2]+" "+dt[1]+" "+dt[3];
  dtStr = dtStr.toTimeString().split(" ");
  dtStr = dt+" "+dtStr[0]+" EST";
   
  return dtStr;
}

function makeInfoPanel(entry,$node,tmplData){
    var props = '';
    var isModule = false;
    var nodeType = entry.type;
    if(nodeType == "libapp")
    {
      for(var i = 0; i < appProps.length; ++i){
         for(var j =0; j < entry[appProps[i]].length; ++j)
         {
           if( j == 0 ){
             props = props +  '<li>'
                             +    '<span class="entry-label-name" style="padding-right:0.2em;">'
                             +       appProps[i] + ': </span>';
          }
                      props +=   '<span class="entry-text">' + encode(entry[appProps[i]][j]) + '</span>';
          if( j == entry[appProps[i]].length - 1){
                      props += '</li>';
           }else{
                      props += '<br/>';
           }
         }
      }
      var nodeEntries = entry.entries; var nodeEntry;
      
      for(var i = 0; i < nodeEntries.length; ++i)
      {
         nodeEntry = nodeEntries[i];
         if(typeof nodeEntry.args == 'undefined') 
         { 
            continue;
         }
         $node.data("_" + nodeEntry.url, nodeEntry.args);
      }

    }else if(nodeType == "module")
    {
       isModule = true;
       for(var i = 0; i < modProps.length; ++i){
         for(var j =0; j < entry[modProps[i]].length; ++j)
         {
           if( j == 0 ){
             props = props +  '<li>'
                             +    '<span class="entry-label-name" style="padding-right:0.2em;">'
                             +       modProps[i] + ': </span>';
          }
                      props +=   '<span class="entry-text">' + encode(entry[modProps[i]][j]) + '</span>';
           if( j == entry[modProps[i]].length - 1){
                      props += '</li>';
           }else{
                      props += '<br/>';
           }
         }
       }
      
       if(ObjectSize(entry.params) > 0)
       {  console.log("found oarams");        
          $node.data("params", entry.params); 
       }
    }
 
    var $infoPanel = $(  '<div class="ui-state-default ui-corner-all info-panel ' + nodeType + '">'
                       +     '<div class="info-panel-heading" style="padding: .6em .6em 0.4em">' 
                       +          '<span class="entry-label-name" style="padding-right:0.2em;">' + entryType[nodeType] + ': </span>'
                       +             encode(entry.description) + '<br/>'
                       +     '</div>'
                       +     '<div class="toggle-info-panel-links" style="padding-left:0.5em;padding-bottom:1em;">'
                       +           '<a class="toggle-info-panel-details" style="color:#0B559B;margin:0 0.4em;cursor:pointer;" href="#">Show Details</a>'
                       +     '</div>'
                       +     '<div class="info-panel-details">'
                       +           '<ul>'
                       +               '<li>'
                       +                  '<span class="entry-label-name" style="padding-right:0.2em;" >Id: ' + '</span>'
                       +                  '<span class="entry-text">' + entry.id + '</span>'
                       +                '</li>'
                       +                '<li>'
                       +                  '<span class="entry-label-name" style="padding-right:0.2em;">Last Updated On: ' + '</span>'
                       +                  '<span ass="entry-text">' + formatDate(encode(entry.updated)) + '</span>'
                       +                '</li>'
                       +                '<li>'
                       +                  '<span class="entry-label-name" style="padding-right:0.2em;">Author: ' + '</span>'
                       +                  '<span class="entry-text">' + encode(entry.author.name) + '</span>'
                       +                '</li>'
                       +                '<li>'
                       +                  '<span class="entry-label-name" style="padding-right:0.2em;">Weblink: ' + '</span>'
                       +                  '<span class="entry-text">'
                       +                     '<a href="' +encode(entry.author.uri)+ '" target="_blank" style="text-decoration:underline">'
                       +                         encode(entry.author.uri)
                       +                     '</a>'
                       +                 '</span>'
                       +                '</li>'
                       +                '<li>'
                       +                   '<span class="entry-label-name" style="padding-right:0.2em;">Email: ' + '</span>'
                       +                   '<span class="entry-text">' + encode(entry.author.email) + '</span>'
                       +                '</li>'
                       +                props
                       +           '</ul>'
                       +     '</div>'
                       + '</div>');

    if( isModule )
	{
		$infoPanel
		        .append('<div class="info-panel-codebody" style="padding:12px 12px 12px 12px;" >'
                      + '<pre>' + encode(entry.body) + '</pre>\n'
                      + '</div>\n')
		        .children('.toggle-info-panel-links')
				.append(' | <a class="toggle-info-panel-codebody" style="color:#0B559B;margin:0 0.4em;cursor:pointer;" href="#">'
						    + 'Show Code'
						+ '</a>');

	}

	var $popup = $("<div>\n" + entry.description + "</div>\n");
    $node.data("popup", $popup);
	$node.data("tmplData",tmplData);
	var addToPanel = {
		onready: function () {
		    $popup.hide().appendTo($rightPanel);
		    $node.children("label:first").after($infoPanel); 
		    if (!(displaymode) && (libx.prefs[entry.id] && libx.prefs[entry.id]._children.length > 1)) {
				$infoPanel
				        .children(".toggle-info-panel-links")
						.find('.toggle-info-panel-details')
						.after(' | <a class="toggle-info-panel-prefs" style="color:#0B559B;margin:0 0.4em;cursor:pointer;" href="#">'
						        + 'Show Preferences'
								+ '</a>');		    
		    }
		}
       };
    aQ.scheduleLast(addToPanel);
    addToPanel.markReady();
	
	return $infoPanel;
}

function insertPreferences ($infoPanel)
{
	if (libx.prefs[$infoPanel.parent().data("id")] && libx.prefs[$infoPanel.parent().data("id")]._children.length > 1) {
		$infoPanel.children(".info-panel-prefs").remove();
		var $toggle_Prefs = $infoPanel.children("div.toggle-info-panel-links").children("a.toggle-info-panel-prefs:first");
		if($toggle_Prefs.text() == "Hide Preferences")
			$toggle_Prefs.text("Show Preferences");
			
		var r = process(libx.prefs[$infoPanel.parent().data("id")], null, $infoPanel.parent().data("tmplData"));
		$infoPanel.append( '<div class="info-panel-prefs">'
                         +   r.html 
                         + '</div>');
		r.doPostInsertionProcessing();
	}
}

function processPackages(packages, elem, isRoot) {

    for (var i = 0; i < packages.length; i++) {
    
        (function () {
    
            var packageUrl = packages[i].url;
            var blocker = new libx.utils.collections.EmptyActivity();
            processCheckTree.scheduleBefore(blocker);
        
            function addRemoveLink($node, id) {
                /* only show remove link for top level, user-added feeds */
                if (!isRoot)
                    return;
                for (var i = 0; i < libx.edition.localizationfeeds.package.length; i++) {
                    var editionPkg = libx.edition.localizationfeeds.package[i];
                    if (editionPkg.url == id)
                        return;
                }
                $('<a href="#" style="text-decoration: underline;">Remove from my packages</a>')
                    .appendTo($node)
                    .click(function () {
                        if (libx.libapp.removeUserPackage(id))
                            reloadPackages();
                    });
            }

            new libx.libapp.PackageWalker(packageUrl).walk({
                onpackage: function (pkg) {

                    libx.prefs.getCategoryForUrl(pkg.id,
                        [{ name: "_enabled", type: "boolean", value: "true" }]);
                    var $node = makeNode(pkg);
                    $node
                        .children("ul")
                            .append('<li class="checktree_separator"></li>')
                        .end().insertBefore(elem.children(".checktree_separator"));
                    processPackages(pkg.entries, $node.children("ul"), false);
                    blocker.markReady();
                    
                    var $prefs = makeInfoPanel(pkg, $node);
                    addRemoveLink($prefs, pkg.id);
                    
                },
                onlibapp: function (libapp) {
                               
                    libx.prefs.getCategoryForUrl(libapp.id,
                        [{ name: "_enabled", type: "boolean", value: "true" }]);
                    var $node = makeNode(libapp);
                    elem.children(".checktree_separator").after($node);
                    processPackages(libapp.entries, $node.children("ul"), false);
                    blocker.markReady();
                               
                    getStringBundle(libapp.id, function (tmplData) {
                        makeInfoPanel(libapp, $node, tmplData);
                    }, libapp.entries);
                    
                },
                onmodule: function (module) {

                    libx.prefs.getCategoryForUrl(module.id,
                        [{ name: "_enabled", type: "boolean", value: "true" }]);
                    if (!libx.prefs[module.id]) {
                        blocker.markReady();
                        return;
                    }
                    
                    
                    var $node = makeNode(module);
                    elem.append($node);
                    blocker.markReady();
                    
                    getStringBundle(module.id, function (tmplData) {
                        makeInfoPanel(module, $node, tmplData);
                    });
                    
                },
                error: function (err) {
                    var entry = { id: packageUrl, description: "(Unknown Entry)" };
                    var $node = makeNode(entry);
                    elem.children(".checktree_separator").before($node);
                    var $prefs = makeInfoPanel(entry, $node);
                    addRemoveLink($prefs, packageUrl);
                    blocker.markReady();
                }
            });
            
        }) ();
        
    }

}

var rootPackages = libx.libapp.getPackages().map(function (pkg) {
    return { url: pkg };
});
processPackages(rootPackages, $checkTree, true);

templateScope.queueFunction(function () {
    $("#libapps-tmpl").find(".tooltip").tooltip({
        delay: 0,
        icon: true
    });
    
    if (displaymode) {
        $("#libapps-subscribe-form").hide();                      
    }
});

!}

<!-- libx.prefs.libapps.tmpl -->
<div id="libapps-tmpl">
    <form id="libapps-subscribe-form" style="margin-bottom: 20px;">
        {L "package_add" L}
        <input style="width: 500px;"></input><br/>
        <div class="tooltip" title="{L 'package_tooltip' L}">{L "package_whatis" L}</div>
    </form>
</div>
