{libxtemplate}

{!
    /**
     *    Default Tree Template
     *    This template requires that the "calling" template define two functions:
     *      - nodeLocale: returns a localized string for a given node
     *      - leafLocale: returns a localized string for a given leaf
     */
    
    var treeAQ = new libx.utils.collections.ActivityQueue();
    templateScope.data.treeAQ = treeAQ;
!}

<!-- tree.tmpl -->
<ul class="checktree" id="tree-{+data._id+}">
    <for each="child" in="data._children">
        {!
            var childProcessedActivity = new libx.utils.collections.EmptyActivity();
            treeAQ.scheduleLast(childProcessedActivity);
            var tmplData = {};
            libx.core.Class.mixin(tmplData, templateScope.data, true);
            tmplData.activity = childProcessedActivity;
        !}
        {P child, "tree.node", tmplData P}
    </for>
</ul>

{!

    function savePref($el) {
        var id = $el.children(":checkbox").attr("name");
        var checked = $el.children(".checkbox").hasClass("checked");
        var pref = libx.preferences.getByID(id);
        if (!pref)
            return;
        if (pref._value != checked) {
            pref._setValue(checked);
            libx.preferences.save();
        }
    }

    var createTreeActivity = {
        onready: function (treeId) {
            $("#tree-" + data._id).checkTree({
                onCheck: savePref,
                onUnCheck: savePref,
                onHalfCheck: savePref
            });
        }
    };
    treeAQ.scheduleLast(createTreeActivity);
    createTreeActivity.markReady(window.currentTreeId);
    
!}
