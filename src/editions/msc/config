#
# This file contains the setting for the Morrisville College edition.
#
# To create your own edition, you must copy this file and change the 
# entries as documented.
#

# This name of the edition will be shown in the title bar of the 
# "About-Box" box and in a tooltip
#
libxedition=Morrisville College Edition

# This is shown in the list of extension if the user clicks on "Tools->Extensions"
emname=LibX Morrisville

# This is shown in the toolbar as label on the button on  the very left
emnameshort=LibX MSC

# These links are shown in the dropdown menu on the top left
$link1.label=Morrsiville College Libraries
$link1.url=http://library.morrisville.edu/
$link2.label=Library Catalog
$link2.url=http://niagara.sunyconnect.suny.edu:4600/F
$link3.label=LibX MSC Homepage
$link3.url=http://libx.org/editions/msc/libx.html
# you can add more here
#
# Legacy note: these replace the old libraryname & libraryhomepage entries
#


#
# Byline for adapter.
#
# Leave empty if you don't wish a byline
# otherwise, fill in, for example, your name and contact information. 
#
# adaptedby=John Smith john.smith@email.com
# This information will be displayed in the About Box dialog.
#
adaptedby=Bill Drew drewwe@morrisville.edu

#
# LibX now supports multiple catalogs.
# The first one is called the primary catalog.
# The others are called secondary catalogs

# Begin of definitions for primary catalog

#
# The catalogtype.
# It must be one of millenium, horizon, aleph, or voyager.
#
$catalog.type=aleph
# used to be catalogtype=aleph

# Name of the catalog - used in many places.
$catalog.name=MSC

# The base URL of the catalog
# No slash at the end.
# Do not include any path here.
# If you look at pg2 of http://www.oclc.org/worldcat/open/deeplinking/openworldcat_deeplinking.pdf
# you need to put the library_opac_baseURL here
#
$catalog.url=http://niagara.sunyconnect.suny.edu:4600
# legacy: used to be catalogurl

$aleph.localbase=mor01
$aleph.title=TIT
$aleph.author=WAU
$aleph.isbn=ISBN
$aleph.issn=ISSN
$aleph.callno=CNA
$aleph.keyword=WRD
$aleph.findfunc=find-b
$aleph.advfindfunc=find-a
$aleph.scanfunc=scan


# A secondary catalog can be defined like so:
# 
#    $catalog1.catalog.type=millenium
#    $catalog1.catalog.name=Connect NY
#    $catalog1.catalog.url=http://connectny.info
#    $catalog1.catalog.sid=libxvt
#    $catalog1.catalog.searchscope=1
#    $catalog1.millenium.sort=

#
# OpenURL resolver
#
# OpenURL resolver type
# Possible values: sersol, webbridge, generic, sfx
#
# Note: fundamentally, OpenURL resolver do the same thing:
# they try to find/link to a resource given the meta tags in the URL
# However, some have quirks: for instance, sersol currently barks if you don't
# specify at least an issn or title meta tag.  Being able to account for such
# minor differences is the only reason to support multiple types here.
# generic and webbridge do the same thing.
#
# Leave empty if you do not wish OpenURL support
#
$openurl.type=sfx

# Base URL of your OpenURL resolver
# include an ending slash here if necessary
# Examples:
# SFX: $openurl.url=http://orion.galib.uga.edu/sfx_git1
# SerSol: $openurl.url=http://zr2yp8gq5s.search.serialssolutions.com/
# WebBridge: $openurl.url=http://www.library.lafayette.edu:4550/resserv

$openurl.url=http://sfx.sunyconnect.suny.edu:9003/morsfx

#
# The 'sid' used by libx.
# This is put in the 'sid=...' part of the OpenURL request.
# It must be something that the resolver accepts.
# It should be something the resolver keeps separate statistics for.
#
# Some resolvers (WB) are very strict about which sid's (also called "Origins" or "Sources")
# they allow.  For those, either add libx as a vendor or pick a sid here that the resolver
# understands.
#
$openurl.sid=libx:morsfx

#
# Name of your OpenURL resolver
#
$openurl.name=MSC FindIt

$openurl.dontshowintoolbar=true

#
# Off-campus proxying.
# Currently support "ezproxy" and "wam".
# Leave empty if not used.
#
$proxy.type=ezproxy

#
# How to rewrite URLs for proxying.  
# For ezproxy, the "%S" is replaced with the URL that should be proxied.
# For wam, provide the hostname for which DNS catch-all is enabled
#        (typically identical to catalogurl without http, as in addison.vt.edu)
#
$proxy.url=http://ezproxy.librarylinks.morrisville.edu:2048/login?url=%S

# Name displayed to the user in right-click context menu
$proxy.name=EZProxy (Off Campus Access)

#
# Should we hijack and rewrite OpenURLs displayed on the Google Scholar page?
# If your library is registered with Scholar, this will simply turn your links into cues 
# If your library is not registered with Scholar, *and* you set preferences in Scholar
# to display results for a library (e.g. Harvard) that is registered, those links
# will be turned into cues that are redirected to your own OpenURL resolver.
#
$libx.rewritescholarpage=true

#
# Support COINS http://ocoins.info/
#
$libx.supportcoins=true

#
# If true, a cue is added to a SerSol results page that shows genre=book&isbn=
# See libx.org -> "Upcoming Features"
#
$libx.sersolisbnfix=true

# Internal URL of large logo.
# Change only the "shield50.gif" part to be the filename of your logo
# lower/upper case is significant
logoURL=http://library.morrisville.edu/images/msc.jpg

# Internal URL of small logo
emiconURL=chrome://libx/skin/msc.ico

# Description displayed in "Tools->Extensions"
emdescription=Toolbar for MSC library users

# Page to which users are directed if they click "Tools->Extensions->Libx->Homepage"
# This URL assume the edition would be hosted on libx
# Adjust if you wish to host yourself.
# I'm happy to put a redirect in this directory if desired.
# (For instance, the URL for VT is a redirect to a VT Library Page.) 
#
# In the next three entries, replace vt with your domain (4x).
#
emhomepageURL=http://www.libx.org/editions/msc/libx.html

# URL which Firefox polls periodically for updates.
# If you want to host the edition yourself, adjust.
emupdateURL=http://www.libx.org/editions/msc/update.rdf

# Location of the .xpi file
xpilocation=http://www.libx.org/editions/msc/libx-msc.xpi
